<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Move</title>
    <link>https://qzqsmile.github.io/post/</link>
    <description>Recent content in Posts on Move</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Sep 2023 23:19:11 +0800</lastBuildDate><atom:link href="https://qzqsmile.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Red_hat_k8s公开书笔记</title>
      <link>https://qzqsmile.github.io/post/k8s/red_hat_k8s%E5%85%AC%E5%BC%80%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 27 Sep 2023 23:19:11 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/k8s/red_hat_k8s%E5%85%AC%E5%BC%80%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Implement a Simple RPC</title>
      <link>https://qzqsmile.github.io/post/rpc/rpc/</link>
      <pubDate>Wed, 20 Sep 2023 21:47:51 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/rpc/rpc/</guid>
      <description>作为一个常年调用各种RPC的一个菜鸡，同时看着公司内部经常会有各种野生自己实现的RPC横空出没。</description>
    </item>
    
    <item>
      <title>Mysql2</title>
      <link>https://qzqsmile.github.io/post/mysql/mysql_part2/</link>
      <pubDate>Wed, 20 Sep 2023 21:21:22 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/mysql/mysql_part2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql45讲笔记(上)</title>
      <link>https://qzqsmile.github.io/post/mysql/mysql_part1/</link>
      <pubDate>Wed, 20 Sep 2023 21:21:19 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/mysql/mysql_part1/</guid>
      <description>&lt;p&gt;这里主要列出的是极客时间Mysql45讲的思维脑图的笔记。
Mysql是如何执行的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mysql的日志系统&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_1.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;事务隔离，为何你的事务看不见&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_2.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;索引相关知识&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_3.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据库里的锁
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_4.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库里的行锁
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重复读模式下事务的实现
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_6.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;普通索引与唯一索引的异同
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为什么选错索引
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;创建字符串索引的一些方法
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为何数据库抖了一下
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;删了数据为何空间没减少
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;count为啥那么慢
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;问题解析
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;orderby是如何执行的
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;随机获取一个值
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为何没用索引
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;SQL语句为何执行那么慢
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;幻读
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ToDo
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;有哪些饮鸩止渴的方法
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;binlog&amp;amp;redo log 怎么保证数据完整
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;主备如何保持一致
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如何保证高可用性
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;切换点怎么缺点
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如何判断mysql是否可用
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/storage/mysql_5.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DDIA笔记</title>
      <link>https://qzqsmile.github.io/post/ddia%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 03 Feb 2021 23:30:46 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/ddia%E7%AC%94%E8%AE%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>认证权限的总结</title>
      <link>https://qzqsmile.github.io/post/%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 17 Jan 2021 23:28:07 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/%E8%AE%A4%E8%AF%81%E6%9D%83%E9%99%90%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;总结一些最近学到的一些认证的应用场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JWT（Json web token) 它的出现主要是克服session认证的一些缺点。因为HTTP都是无状态的，所以HTTP这个协议一般采用session+cookie的方式实现状态的保持，其中session全部放在server来实现。 刚开始这样实现没什么问题，但是随着应用越来越大，当需要对server进行横线扩展时，session该保存在哪里就是一个问题了。当然可以使用一些单独的结点进行存储，比如 redis。但JWT的解决思路是把这些信息都放在client端，通过证书加解密来克服获取具体的权限信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OAuth2.0 Oauth主要是解决authorization的问题。为了解决Authorization的问题，很直接的想法就是在Auth之间添加一层Authorization。 Oauth的流程可以分为以下四步&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;客户端带着clientid去询问user是否给权限&lt;/li&gt;
&lt;li&gt;user回复yes，同意授予权限。如果不同意，这里就结束了。&lt;/li&gt;
&lt;li&gt;客户端拿着user同意的回复。在后端通过带着secret的请求询问AcessToken&lt;/li&gt;
&lt;li&gt;目标网站返回Access Token。 接下来客户端都可以带着这个Access Token去访问目标网站的API。当然实际中的应用要复杂一些。还要考虑refresh的问题。 对于要申请不同Authorization的client分配一个secret，然后对不同的secret进行设置权限。secret的安全性由申请权限的客户端进行保证，这样的设计如果作为一个纯粹后端的项目时可行的。但是实际上Oauth2.0作为一个给User使用的协议，其前端操作时比不可少的，所以如果仅仅有secert，在前端操作时势必会泄露。所以Oauth2引入了一个clientid来标识客户端，这个clientid与secret是一一对应的关系，与secret不同的是，这个clientid是公开的。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;OpenID 这是纯粹解决Authencation领域的协议。OpenID经常是基于Oauth2 来实现。换句话说当用户有了相应的Access token之后，可以获取到一个用户的ID，这个ID唯一标识了这个用户的身份。 平常我们使用的微信登陆其实就是Oauth2+openID协议的结合&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Programming Kubernetes notes</title>
      <link>https://qzqsmile.github.io/post/k8s/programming_kubernetes_notes/</link>
      <pubDate>Sun, 17 Jan 2021 23:26:11 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/k8s/programming_kubernetes_notes/</guid>
      <description>&lt;p&gt;ch1 主要是一些overview式的介绍。如果你对k8s之前比较熟悉的话，很多内容都是重复的。对我而言，有以下几点有些启发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本书提名k8s编程，这里与其它运行在k8s里的container一个重要的区别是，应用是否自己知道运行在k8s里。换句话就是是否会使用一些k8s的API&lt;/li&gt;
&lt;li&gt;K8s采取的是乐观锁的机制，Controller需要自己实现乐观锁的判断逻辑&lt;/li&gt;
&lt;li&gt;K8s采取Edge-driven和level-driven两种结合的方式，来实现响应时间，以及稳定性的要求&lt;/li&gt;
&lt;li&gt;Operator 本质是为了帮助一些复杂的stateful的container进行部署的模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ch2 主要讲了API Server的相关知识，对我没什么特别新的东西。唯一学到的是k8s API。分为GVR(Group Version Resource)GVK (Group version kind)。区别也很简单，简单来说就是类和实例之间的关系。 GVK可以对应许多GVR&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Azure上BI的搭建</title>
      <link>https://qzqsmile.github.io/post/cloud/azure%E4%B8%8Abi%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 01 Nov 2020 23:03:46 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/cloud/azure%E4%B8%8Abi%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>最近因为业务需要，尝试搭建着一些大数据平台。发现相对于纯手工从头搞起，还是使用Azure上的Service来搭建来的香。 以上是Azure推荐</description>
    </item>
    
    <item>
      <title>Golang调度</title>
      <link>https://qzqsmile.github.io/post/golang/golang%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 04 Oct 2020 23:19:49 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/golang/golang%E8%B0%83%E5%BA%A6/</guid>
      <description>Golang协程调度的知识点总结 Golang协程调度器的由来 我们都知道DOS系统是PC的上古系统，其中DOS系统可以认为是个单进程的操作系统</description>
    </item>
    
    <item>
      <title>Go的一些知识点</title>
      <link>https://qzqsmile.github.io/post/golang/go%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sat, 03 Oct 2020 22:16:39 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/golang/go%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>内存分配 微小对象，size &amp;lt; 16B 一般小对象， 16 bytes &amp;lt; size &amp;lt;= 32k 大对象 size &amp;gt; 32k 对应的分配方式分三种： tinny allocations (size &amp;lt; 16 bytes，no pointers) 微型分配器分配。 small allocations ( size</description>
    </item>
    
    <item>
      <title>K8s总体架构流程</title>
      <link>https://qzqsmile.github.io/post/k8s/k8s%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 01 Oct 2020 22:25:02 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/k8s/k8s%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;总结一些中k8s的架构各个部分的功能&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/arch/k8s_1.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;总体结构&lt;/p&gt;
&lt;p&gt;etcd: 分布式存储的module，主要提供高可靠存储。其中我们使用kubectl编写的一些yaml文件，其中的描述信息都会存取其中
API Server: 与Etcd打交道的的模块，一切访问ectd的操作都要经过它 Scheduler：简单来讲，就是为Pod选定Node的模块，因为调度时需要考虑一些设定的规则，比如node-selector等。就是在这个部分实现的
Control-Manager: 监控ectd的yaml文件是否变化，并采取相应的操作。不同的模块其实对应不同的control-manager，比如deployment对应自己的controller，因为不同的某块需要的manger策略其实不相同。
kube-proxy: 一个proxy，之前通信都是用经过iptables-&amp;gt;kubeproxy-&amp;gt;pods 这样。但是后来其实不用经过kubeproxy了。
kubelet: 各个node里直接操作container的module
如下这个kubelet到创建contrainer的流程也很有参考意义&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://qzqsmile.github.io/images/arch/k8s_2.png&#34;
         alt=&#34;Image Alt Text&#34;/&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Go的sync库的总结</title>
      <link>https://qzqsmile.github.io/post/golang/go%E7%9A%84sync%E5%BA%93%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 27 Sep 2020 22:20:43 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/golang/go%E7%9A%84sync%E5%BA%93%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Redis源码的笔记</title>
      <link>https://qzqsmile.github.io/post/arch/redis/</link>
      <pubDate>Sun, 09 Aug 2020 23:20:25 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/arch/redis/</guid>
      <description>之前看过Redis，最近Redis升6.0改动不小，重新review一下源码，边看边做一些注释，详见 https://github.com/qzqsmile/redis/tree/annotation-601 SDS部分 Redis用来存字符串的数据</description>
    </item>
    
    <item>
      <title>网络相关的知识</title>
      <link>https://qzqsmile.github.io/post/net/net/</link>
      <pubDate>Tue, 04 Aug 2020 23:19:30 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/net/net/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Microserver</title>
      <link>https://qzqsmile.github.io/post/microserver/microserver/</link>
      <pubDate>Sat, 01 Aug 2020 23:19:08 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/microserver/microserver/</guid>
      <description></description>
    </item>
    
    <item>
      <title>K8s笔记</title>
      <link>https://qzqsmile.github.io/post/k8s/k8s%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 13 Jul 2020 23:18:35 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/k8s/k8s%E7%AC%94%E8%AE%B0/</guid>
      <description>这里主要记录一下学习K8s的一些简单概念以及操作。想到哪写到哪 kubeadm 集群的安装 kubeadm的出现大大简化了K8s集群搭建的难度，但是这里最坑的</description>
    </item>
    
    <item>
      <title>Zookeeper的一些常用应用场景</title>
      <link>https://qzqsmile.github.io/post/arch/zookeeper/</link>
      <pubDate>Tue, 23 Jun 2020 23:00:31 +0800</pubDate>
      
      <guid>https://qzqsmile.github.io/post/arch/zookeeper/</guid>
      <description>&lt;p&gt;zookeeper可以简单认为是一个KV系统，它与其它的一些存储组件。比如 Mysql， Redis 集群的区别。个人认为主要集中在以下几个方面&lt;/p&gt;
&lt;p&gt;由于Zab这个multi-paxoes协议的保证，zk的集群是高可靠的，换句话说是满足CAP中的CP。其它的比如Redis集群以及Mysql主从或多或少都有些问题。比如Redis集群应该是只是AP，Mysql亦然
提供了自增结点这种数据结构，自增这种操作方式很容易的区分两个操作的时间关系。可以快捷的实现一些分布式功能，比如FIFO的分布式队列。以及分布式锁中也有应用
提供了Watch这种消息推送的消息传递机制，比单纯的客户端轮询消息效率要高不少。
提供了临时结点这个数据结构，当连接断开后自动删除。可以监控客户端的进程的状态，防止其崩溃&lt;/p&gt;
&lt;p&gt;分布式队列
(&lt;a href=&#34;https://github.com/qzqsmile/books/tree/master/zookeeper/distributedQueue&#34;&gt;https://github.com/qzqsmile/books/tree/master/zookeeper/distributedQueue&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;分布式锁
&lt;a href=&#34;https://github.com/qzqsmile/books/tree/master/zookeeper/d_lock&#34;&gt;https://github.com/qzqsmile/books/tree/master/zookeeper/d_lock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;服务发现
&lt;a href=&#34;https://github.com/qzqsmile/books/blob/master/zookeeper/serverDiscovered/serviceDiscovered.go&#34;&gt;https://github.com/qzqsmile/books/blob/master/zookeeper/serverDiscovered/serviceDiscovered.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分布式消息
todo&lt;/p&gt;
&lt;p&gt;配置中心
todo&lt;/p&gt;
&lt;p&gt;负载均衡
todo&lt;/p&gt;
&lt;p&gt;zk的watch机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go_memory_translate</title>
      <link>https://qzqsmile.github.io/post/golang/go_memory_translate/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://qzqsmile.github.io/post/golang/go_memory_translate/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flask的hello world的工作流程</title>
      <link>https://qzqsmile.github.io/post/arch/flask/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://qzqsmile.github.io/post/arch/flask/</guid>
      <description>&lt;h4&gt;输入一条URL，Flask会如何解析&lt;/h4&gt;
利用flask写应用也有一段时间了，这里尝试分析下flask的官网最简单的 hello world 的demo来加深对flask的理解。
```python 
from flask import Flask
app = Flask(__name__)
&lt;p&gt;@app.route(&amp;rsquo;/&amp;rsquo;)
def hello_world():
return &amp;lsquo;Hello World!&amp;rsquo;&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rsquo;:
app.run()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;上边的这段代码就是&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flask官网给出的hello&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world的应用&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，具体可以参照&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;这里&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;docs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jinkan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;docs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quickstart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#a-minimal-application)。仔细观察一下以上代码，可以看出来，其实对于像flask的这种Web框架，其本质上的任务是建立URL到业务处理函数之间的mapping关系。具体到这个hello world的例子当中建立的就是 URL`\` 到 `hello_world`的映射关系。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;说到这种&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mapping关系&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，对数据结构稍微熟悉些的人都会想到&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;事实上&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flask中确实使用了hash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table作为映射的机制&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;def&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;def&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;endpoint&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add_url_rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decorator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt; 这里先看一看&lt;code&gt;app.route&lt;/code&gt;的代码,这里可以看出来这个其实实际上就是这个Python最常用的装饰器，实际起作用的代码在add_url_rule当中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_url_rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view_func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;provide_automatic_options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view_func&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view_functions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;AssertionError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;View function mapping is overwriting an &amp;#39;&amp;#39;existing endpoint function: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view_functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view_func&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;点入app_url_rule当中后，发到实际工作的代码处。其中大部分代码是具体一些具体的参数设置，而映射的主要工作如上图的代码所示。在具体的阐明各个代码的具体工作原理之前，首先我们需要知道Flask是基于werkzeug实现的。此文的重点在于Flask，所以不会过多的涉及werkzeug的内容，仅仅将某些是werkzeug实现的功能进行带过。&lt;/p&gt;
&lt;p&gt; 前文一直在说Flask实现的功能是将URL对相应的处理函数的映射。其实是不精确的，因为实际上Flask中有三个层次的东西，相应的映射关系为URL-&amp;gt;EndPoint-&amp;gt;ViewFunction。其中URL即为请求中的网址，而viewfunction 则为相应的逻辑处理函数。至于为什么要在中间加一次endpoint，答案很简单，这样的处理更加灵活。具体可以参见stackoverflow的这篇&lt;a href=&#34;https://stackoverflow.com/questions/19261833/what-is-an-endpoint-in-flask&#34;&gt;回答&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;  回到上边的代码，其中#1 处实现了url到endpoint的映射的设置(werkzeug来实现)。而#2则是实现了Endpoint-&amp;gt;ViewFunction.其中Viewfunction即函数&lt;code&gt;hello_world&lt;/code&gt;.而对于app.run的这种函数，分析其代码可以发现其相应的处理逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_dotenv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;werkzeug.serving&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run_simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;run_simple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;# reset the first request information if the development server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;# reset normally.  This makes it possible to restart the server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;# without reloader and that stuff from an interactive shell.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_got_first_request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中#1即为Werkzeug中相应的逻辑处理，它负责调用self的&lt;code&gt;__call__&lt;/code&gt;函数，而app的&lt;code&gt;__call__&lt;/code&gt;则会调用 &lt;code&gt;wsgi_app&lt;/code&gt;函数。 而wsgi_app即为处理相应request的框架函数，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wsgi_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_dispatch_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handle_exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exc_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;should_ignore_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中 environ为相应的request的请求上下文信息(由WerkZeug)进行保证。 #1出对其进行相应的逻辑处理，然后返回response。而这个response又会交由 werkzeug返还给客服端。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
